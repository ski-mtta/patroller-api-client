// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * MTTA Ski Patrol Web Services API
 *          Web Services for Mt. Tahoma Trails Association Ski Patrol, supporting the following features:              - Manage Ski Patroller Information;             - Ski Patroller Login;             - Schedule Ski Patrol Duty Dates;             - Automatically approve and fill out time sheets;             - Sign in/out for Ski Patrol duty;             - Broadcast and Post Direct Messages to Ski Patrollers;             - (Future) Real-Time GPS Tracking of Patrollers;             - Other features to be added... suggestions wanted! :)              
 *
 * OpenAPI spec version: 0.1.0
 * Contact: Ryan.Michael.Tate@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthenticationPostRequest
 */
export interface AuthenticationPostRequest {
    /**
     * Ski Patrol Number
     * @type {number}
     * @memberof AuthenticationPostRequest
     */
    spNumber: number;
    /**
     * Personal password
     * @type {string}
     * @memberof AuthenticationPostRequest
     */
    password: string;
}

/**
 * 
 * @export
 * @interface AuthenticationPostResponse
 */
export interface AuthenticationPostResponse {
    /**
     * JSON Web Token (JWT) used in Authorization header when making authenticated requests.
     * @type {string}
     * @memberof AuthenticationPostResponse
     */
    accessToken: string;
}

/**
 * 
 * @export
 * @interface PatrollersGetResponse
 */
export interface PatrollersGetResponse {
    /**
     * Patroller ID (uuidV4) used when making API requests.
     * @type {string}
     * @memberof PatrollersGetResponse
     */
    patrollerId: string;
    /**
     * First Name of the Ski Patroller
     * @type {string}
     * @memberof PatrollersGetResponse
     */
    firstName: string;
    /**
     * Last Name of the Ski Patroller
     * @type {string}
     * @memberof PatrollersGetResponse
     */
    lastName: string;
    /**
     * Ski Patrol Number
     * @type {number}
     * @memberof PatrollersGetResponse
     */
    spNumber: number;
    /**
     * Email address
     * @type {string}
     * @memberof PatrollersGetResponse
     */
    email: string;
    /**
     * Phone number
     * @type {string}
     * @memberof PatrollersGetResponse
     */
    phoneNumber: string;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof PatrollersGetResponse
     */
    physicalAddress: PhysicalAddress;
}

/**
 * 
 * @export
 * @interface PatrollersPostRequest
 */
export interface PatrollersPostRequest {
    /**
     * First Name of the Ski Patroller
     * @type {string}
     * @memberof PatrollersPostRequest
     */
    firstName: string;
    /**
     * Last Name of the Ski Patroller
     * @type {string}
     * @memberof PatrollersPostRequest
     */
    lastName: string;
    /**
     * Ski Patrol Number
     * @type {number}
     * @memberof PatrollersPostRequest
     */
    spNumber: number;
    /**
     * Personal password
     * @type {string}
     * @memberof PatrollersPostRequest
     */
    password: string;
    /**
     * Email address
     * @type {string}
     * @memberof PatrollersPostRequest
     */
    email: string;
    /**
     * Phone number
     * @type {string}
     * @memberof PatrollersPostRequest
     */
    phoneNumber: string;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof PatrollersPostRequest
     */
    physicalAddress: PhysicalAddress;
}

/**
 * 
 * @export
 * @interface PatrollersPostResponse
 */
export interface PatrollersPostResponse {
    /**
     * Patroller ID (uuidV4) used when making API requests.
     * @type {string}
     * @memberof PatrollersPostResponse
     */
    patrollerId: string;
    /**
     * First Name of the Ski Patroller
     * @type {string}
     * @memberof PatrollersPostResponse
     */
    firstName: string;
    /**
     * Last Name of the Ski Patroller
     * @type {string}
     * @memberof PatrollersPostResponse
     */
    lastName: string;
    /**
     * Ski Patrol Number
     * @type {number}
     * @memberof PatrollersPostResponse
     */
    spNumber: number;
    /**
     * Email address
     * @type {string}
     * @memberof PatrollersPostResponse
     */
    email: string;
    /**
     * Phone number
     * @type {string}
     * @memberof PatrollersPostResponse
     */
    phoneNumber: string;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof PatrollersPostResponse
     */
    physicalAddress: PhysicalAddress;
}

/**
 * Physical Address for Ski Patroller
 * @export
 * @interface PhysicalAddress
 */
export interface PhysicalAddress {
    /**
     * The street address for the physical address
     * @type {string}
     * @memberof PhysicalAddress
     */
    streetAddress: string;
    /**
     * The city for the physical address.
     * @type {string}
     * @memberof PhysicalAddress
     */
    city: string;
    /**
     * The state for the physical address
     * @type {string}
     * @memberof PhysicalAddress
     */
    state: string;
    /**
     * The zip code for the physical address
     * @type {string}
     * @memberof PhysicalAddress
     */
    zipCode: string;
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create JWT using Ski Patrol Number and Password Credentials
         * @summary Create JWT
         * @param {AuthenticationPostRequest} authenticationPostRequest Ski Patrol Number and Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthToken(authenticationPostRequest: AuthenticationPostRequest, options: any = {}): RequestArgs {
            // verify required parameter 'authenticationPostRequest' is not null or undefined
            if (authenticationPostRequest === null || authenticationPostRequest === undefined) {
                throw new RequiredError('authenticationPostRequest','Required parameter authenticationPostRequest was null or undefined when calling createAuthToken.');
            }
            const localVarPath = `/authentication`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"AuthenticationPostRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authenticationPostRequest !== undefined ? authenticationPostRequest : {}) : (authenticationPostRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create JWT using Ski Patrol Number and Password Credentials
         * @summary Create JWT
         * @param {AuthenticationPostRequest} authenticationPostRequest Ski Patrol Number and Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthToken(authenticationPostRequest: AuthenticationPostRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationPostResponse> {
            const localVarAxiosArgs = AuthenticationApiAxiosParamCreator(configuration).createAuthToken(authenticationPostRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create JWT using Ski Patrol Number and Password Credentials
         * @summary Create JWT
         * @param {AuthenticationPostRequest} authenticationPostRequest Ski Patrol Number and Password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthToken(authenticationPostRequest: AuthenticationPostRequest, options?: any) {
            return AuthenticationApiFp(configuration).createAuthToken(authenticationPostRequest, options)(axios, basePath);
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Create JWT using Ski Patrol Number and Password Credentials
     * @summary Create JWT
     * @param {AuthenticationPostRequest} authenticationPostRequest Ski Patrol Number and Password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public createAuthToken(authenticationPostRequest: AuthenticationPostRequest, options?: any) {
        return AuthenticationApiFp(this.configuration).createAuthToken(authenticationPostRequest, options)(this.axios, this.basePath);
    }

}


/**
 * PatrollersApi - axios parameter creator
 * @export
 */
export const PatrollersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new patroller
         * @summary Create a New Patroller
         * @param {PatrollersPostRequest} patrollersPostRequest Ski Patroller Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatroller(patrollersPostRequest: PatrollersPostRequest, options: any = {}): RequestArgs {
            // verify required parameter 'patrollersPostRequest' is not null or undefined
            if (patrollersPostRequest === null || patrollersPostRequest === undefined) {
                throw new RequiredError('patrollersPostRequest','Required parameter patrollersPostRequest was null or undefined when calling createPatroller.');
            }
            const localVarPath = `/patrollers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"PatrollersPostRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(patrollersPostRequest !== undefined ? patrollersPostRequest : {}) : (patrollersPostRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get patroller
         * @summary Get Patroller
         * @param {string} patrollerId Patroller ID (uuidV4) used when making API requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatroller(patrollerId: string, options: any = {}): RequestArgs {
            // verify required parameter 'patrollerId' is not null or undefined
            if (patrollerId === null || patrollerId === undefined) {
                throw new RequiredError('patrollerId','Required parameter patrollerId was null or undefined when calling getPatroller.');
            }
            const localVarPath = `/patrollers/{patroller_id}`
                .replace(`{${"patroller_id"}}`, encodeURIComponent(String(patrollerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatrollersApi - functional programming interface
 * @export
 */
export const PatrollersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new patroller
         * @summary Create a New Patroller
         * @param {PatrollersPostRequest} patrollersPostRequest Ski Patroller Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatroller(patrollersPostRequest: PatrollersPostRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatrollersPostResponse> {
            const localVarAxiosArgs = PatrollersApiAxiosParamCreator(configuration).createPatroller(patrollersPostRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get patroller
         * @summary Get Patroller
         * @param {string} patrollerId Patroller ID (uuidV4) used when making API requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatroller(patrollerId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatrollersGetResponse> {
            const localVarAxiosArgs = PatrollersApiAxiosParamCreator(configuration).getPatroller(patrollerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PatrollersApi - factory interface
 * @export
 */
export const PatrollersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new patroller
         * @summary Create a New Patroller
         * @param {PatrollersPostRequest} patrollersPostRequest Ski Patroller Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPatroller(patrollersPostRequest: PatrollersPostRequest, options?: any) {
            return PatrollersApiFp(configuration).createPatroller(patrollersPostRequest, options)(axios, basePath);
        },
        /**
         * Get patroller
         * @summary Get Patroller
         * @param {string} patrollerId Patroller ID (uuidV4) used when making API requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPatroller(patrollerId: string, options?: any) {
            return PatrollersApiFp(configuration).getPatroller(patrollerId, options)(axios, basePath);
        },
    };
};

/**
 * PatrollersApi - object-oriented interface
 * @export
 * @class PatrollersApi
 * @extends {BaseAPI}
 */
export class PatrollersApi extends BaseAPI {
    /**
     * Create a new patroller
     * @summary Create a New Patroller
     * @param {PatrollersPostRequest} patrollersPostRequest Ski Patroller Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatrollersApi
     */
    public createPatroller(patrollersPostRequest: PatrollersPostRequest, options?: any) {
        return PatrollersApiFp(this.configuration).createPatroller(patrollersPostRequest, options)(this.axios, this.basePath);
    }

    /**
     * Get patroller
     * @summary Get Patroller
     * @param {string} patrollerId Patroller ID (uuidV4) used when making API requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatrollersApi
     */
    public getPatroller(patrollerId: string, options?: any) {
        return PatrollersApiFp(this.configuration).getPatroller(patrollerId, options)(this.axios, this.basePath);
    }

}


